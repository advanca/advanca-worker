// Copyright 2020 ADVANCA PTE. LTD.

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

enclave {
	from "sgx_tstd.edl" import *;
	from "sgx_stdio.edl" import *;
	from "sgx_backtrace.edl" import *;
	from "sgx_tstdc.edl" import *;
	from "sgx_tprotected_fs.edl" import *;

	include "sgx_quote.h"
	include "sgx_key_exchange.h"
	include "sgx_trts.h"

	from "sgx_tkey_exchange.edl" import *;

	struct CSgxEphemeralKey {
		sgx_ec256_public_t pubkey;
		sgx_ec256_signature_t signature;
	};

	struct CSgxAasRequest {
		sgx_ec256_public_t pubkey;
		sgx_cmac_128bit_tag_t mac;
	};


	trusted {
		/* define ECALLs here. */
		public sgx_status_t init();

		public sgx_status_t create_storage(
			[in, size=public_key_size] uint8_t* public_key, uint32_t public_key_size
		);

		public sgx_status_t storage_request(
			[in, size=request_size] uint8_t* request, uint32_t request_size,
			[out, size=response_capacity] uint8_t* response, uint32_t response_capacity,
			[out] uint32_t* response_size
		);

		public sgx_status_t get_sr25519_public_key(
			[out, size=public_key_size] uint8_t* public_key, uint32_t public_key_size);

		public sgx_status_t enclave_init_ra (
				int b_pse,
				[out] sgx_ra_context_t *p_context
				);

		public sgx_status_t enclave_ra_close (
				sgx_ra_context_t context
				);

		public sgx_status_t gen_worker_ec256_pubkey (
				);

		public sgx_status_t gen_worker_reg_request (
				sgx_ra_context_t context,
				[out] CSgxAasRequest *aas_request
				);

		public sgx_status_t accept_task (
				sgx_ec256_public_t user_pubkey,
				[out] uint32_t *task_id
				);
	};

	untrusted {
		/* define OCALLs here. */
	};
};
